(defvar *points* '(0 0))
(defvar *member* 2)
(defvar *history* '(() ()))
(defvar *labels* '(0))
(defvar *times* 0)
(defvar *rs* (make-random-state t))

(defun init-game (member &optional init-points)
  (setf *member* member)
  (setf *points* (if init-points 
                     (loop for ind from 1 to member collect (elt init-points (1- ind))) 
                     (loop for ind from 1 to member collect 0)))
  (setf *history* (loop for ind from 0 to (1- member) collect (list (elt *points* ind))))
  (setf *times* 0)
  (setf *labels* '(0))
  (setf *rs* (make-random-state t))
  member)

(defun trick ()
  (let ((winner (random *member* *rs*))
        (looser (random *member* *rs*)))
    (incf (elt *points* winner))
    (decf (elt *points* looser)))
  (dotimes (ind *member*)
    (push  (elt *points* ind) (elt *history* ind)))
  (incf *times*)
  (push *times* *labels*))

(defun game (num)
  (dotimes (i num *points*)
    (trick)))
  
(defmacro history-inds ()
  (cons 'list (loop for i downfrom *member* to 1 collect '*labels*)))
